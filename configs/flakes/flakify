#!/usr/bin/env bash
set -euo pipefail

if ! [ -e flake.nix ]; then
  cat >flake.nix <<'EOH'
{
  description = "A basic flake with a shell";
  inputs.nixpkgs = {
    type = "github";
    owner = "NixOS";
    repo = "nixpkgs";
    ref = "nixpkgs-unstable";
    # Known-stable revision:
    #rev = "f096b7122ab08e93c8b052c92461ca71b80c0cc8";
  };
  inputs.flake-utils.url = "github:numtide/flake-utils";
  inputs.flake-compat = {
    url = "github:edolstra/flake-compat";
    flake = false;
  };

  outputs = { self, nixpkgs, flake-utils, flake-compat }:
    flake-utils.lib.eachDefaultSystem (system: let
      pkgs = import nixpkgs {
        inherit system;
        # config.allowUnfree = true;
      };
    in {
      devShell = pkgs.mkShell {
        nativeBuildInputs = [
          pkgs.bashInteractive
        ];
        buildInputs = [
        ];
      };
    });
}
EOH

  git add -N ./flake.nix 2>/dev/null || true
fi

if ! [ -e ./default.nix ]; then
  cat >default.nix <<'EOH'
(import
  (
    let lock = builtins.fromJSON (builtins.readFile ./flake.lock); in
    fetchTarball {
      url = "https://github.com/edolstra/flake-compat/archive/${lock.nodes.flake-compat.locked.rev}.tar.gz";
      sha256 = lock.nodes.flake-compat.locked.narHash;
    }
  )
  { src = ./.; }
).defaultNix
EOH
  git add -N ./default.nix
fi

if ! grep -qFe 'use flake' ./.envrc 1>/dev/null 2>&1; then
  printf 'use flake\n' >> .envrc
  direnv allow
fi

"${EDITOR:-vim}" flake.nix
